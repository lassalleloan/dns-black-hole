#!/bin/sh -u
# -u: Treat unset variables as an error when performing parameter expansion.
# If expansion is attempted on an unset interactive, exits with a non-zero status.
#
# Manage the dns-black-hole app
#
# author: Loan Lassalle <https://github.com/lassalleloan>

# Image tag and container name
IMAGE_TAG="dns-black-hole"
CONTAINER_NAME="$IMAGE_TAG"

# Source and destination directories for the docker container"s volume
SRC_VOLUME_1="$(sed -En 's/^# SRC_VOLUME_1=([^ #]+)/\1/p' env.list)"
DST_VOLUME_1="$(sed -En 's/^# DST_VOLUME_1=([^ #]+)/\1/p' env.list)"

SRC_VOLUME_2="$(sed -En 's/^# SRC_VOLUME_2=([^ #]+)/\1/p' env.list)"
DST_VOLUME_2="$(sed -En 's/^# DST_VOLUME_2=([^ #]+)/\1/p' env.list)"

SRC_VOLUME_3="$(sed -En 's/^# SRC_VOLUME_3=([^ #]+)/\1/p' env.list)"
DST_VOLUME_3="$(sed -En 's/^# DST_VOLUME_3=([^ #]+)/\1/p' env.list)"

SRC_VOLUME_4="$(sed -En 's/^# SRC_VOLUME_4=([^ #]+)/\1/p' env.list)"
DST_VOLUME_4="$(sed -En 's/^# DST_VOLUME_4=([^ #]+)/\1/p' env.list)"

# Processing mode
INTERACTIVE=false
DETACH=false

# Bypass any prior checking
FORCE=false

# Remove all data generated by Docker
PURGE=false

# Default verbosity level
VERBOSITY="$(sed -En 's/^# VERBOSITY=([0-9]([.][0-9]*)*)$/\1/p' env.list)"

# Display a banner
banner() {
  printf "     _             _    _         _       _        _                      \n"
  printf "  __| |_ _  ______| |__| |__ _ __| |_____| |_  ___| |___   __ _ _ __ _ __ \n"
  printf " / _\` | ' \(_-<___| '_ \ / _\` / _| / /___| ' \/ _ \ / -_) / _\` | '_ \ '_ \ \n"
  printf " \__,_|_||_/__/   |_.__/_\__,_\__|_\_\   |_||_\___/_\___| \__,_| .__/ .__/\n"
  printf "                                                               |_|  |_|   \n"
}

# Usage of the script
usage() {
  printf "Usage: run-app [--interactive | --detach --force --verbosity (0 | 1 | 2) | --purge --verbosity (0 | 1 | 2)]\n"
  printf "\n"
  printf "Manage the dns-black-hole app\n"
  printf "\n"
  printf "Version: 1.0.0, build deadbeef\n"
  printf "\n"
  printf "Author:\n"
  printf "  Loan Lassalle - <https://github.com/lassalleloan>\n"
  printf "\n"
  printf "Options:\n"
  printf "  -i, --interactive               Keep stdin open even if not attached and allocate a pseudo-tty\n"
  printf "  -d, --detach                    Leave the container running in the background\n"
  printf "  -f, --force                     Force the application to run, bypass any prior checking\n"
  printf "  -p, --purge                     Remove all data generated by Docker\n"
  printf "  -v, --verbosity (0 | 1 | 2)     Level of verbosity: no ouput, step information, interactive\n"
  printf "  -h, --help                      Help on how to use this script\n"
}

# Build docker container
build_container() {
  local image_tag="$1"
  local container_name="$2"
  local verbosity="$3"

  if [ "$verbosity" -ne 0 ]; then
    printf "Building %s docker container\n" "$container_name"
  fi

  if [ "$verbosity" -eq 2 ]; then
    docker build --force-rm --tag "$image_tag" .
  else
    docker build --force-rm --quiet --tag "$image_tag" . >/dev/null 2>&1
  fi
}

# Start docker container
start_container() {
  local image_tag="$1"
  local container_name="$2"
  local src_directory_1="$3"
  local dst_directory_1="$4"
  local src_directory_2="$5"
  local dst_directory_2="$6"
  local src_directory_3="$7"
  local dst_directory_3="$8"
  local src_directory_4="$9"
  local dst_directory_4="${10}"
  local interactive="${11}"
  local verbosity="${12}"

  if [ "$verbosity" -ne 0 ]; then
    printf "Starting %s docker container\n" "$container_name"
  fi

  if [ "$interactive" = true ]; then
    docker run \
      --interactive \
      --entrypoint "sh" \
      --env-file env.list \
      --name "$container_name" \
      --rm \
      --tty \
      --volume "$src_directory_1":"$dst_directory_1" \
      --volume "$src_directory_2":"$dst_directory_2" \
      --volume "$src_directory_3":"$dst_directory_3" \
      --volume "$src_directory_4":"$dst_directory_4" \
      "$image_tag"
  else
    if [ "$verbosity" -eq 2 ]; then
      docker run \
        --interactive \
        --env-file env.list \
        --name "$container_name" \
        --rm \
        --tty \
        --volume "$src_directory_1":"$dst_directory_1" \
        --volume "$src_directory_2":"$dst_directory_2" \
        --volume "$src_directory_3":"$dst_directory_3" \
        --volume "$src_directory_4":"$dst_directory_4" \
        "$image_tag"
    else
      docker run \
        --interactive \
        --env-file env.list \
        --name "$container_name" \
        --rm \
        --tty \
        --volume "$src_directory_1":"$dst_directory_1" \
        --volume "$src_directory_2":"$dst_directory_2" \
        --volume "$src_directory_3":"$dst_directory_3" \
        --volume "$src_directory_4":"$dst_directory_4" \
        "$image_tag" >/dev/null 2>&1
    fi
  fi
}

# Stop docker container
stop_container() {
  local container_name="$1"
  local verbosity="$2"

  if [ "$verbosity" -ne 0 ]; then
    printf "Stopping %s docker container\n" "$container_name"
  fi

  if [ "$verbosity" -eq 2 ]; then
    docker stop "$container_name"
  else
    docker stop "$container_name" >/dev/null 2>&1
  fi
}

# Kill docker container
kill_container() {
  local container_name="$1"
  local verbosity="$2"

  if [ "$verbosity" -ne 0 ]; then
    printf "Killing %s docker container\n" "$container_name"
  fi

  if [ "$verbosity" -eq 2 ]; then
    docker kill "$container_name"
  else
    docker kill "$container_name" >/dev/null 2>&1
  fi
}

# Remove docker container
remove_container() {
  local container_name="$1"
  local verbosity="$2"

  if [ "$verbosity" -ne 0 ]; then
    printf "Removing %s docker container\n" "$container_name"
  fi

  if [ "$verbosity" -eq 2 ]; then
    docker rm --volumes "$container_name"
  else
    docker rm --volumes "$container_name" >/dev/null 2>&1
  fi
}

# Remove docker volume
remove_volume() {
  local volume_name="$1"
  local verbosity="$2"

  if [ "$verbosity" -ne 0 ]; then
    printf "Removing %s docker volume\n" "$volume_name"
  fi

  if [ "$verbosity" -eq 2 ]; then
    docker volume rm "$volume_name"
  else
    docker volume rm "$volume_name" >/dev/null 2>&1
  fi
}

# Remove unused local docker volumes
remove_volumes_unused() {
  local verbosity="$1"

  if [ "$verbosity" -ne 0 ]; then
    printf "Removing unused local docker volumes\n"
  fi

  if [ "$verbosity" -eq 2 ]; then
    docker volume prune
  else
    docker volume prune --force >/dev/null 2>&1
  fi
}

# Remove docker image
remove_image() {
  local image_name="$1"
  local verbosity="$2"

  if [ "$verbosity" -ne 0 ]; then
    printf "Removing %s docker image\n" "$image_name"
  fi

  if [ "$verbosity" -eq 2 ]; then
    docker image rm "$image_name"
  else
    docker image rm "$image_name" >/dev/null 2>&1
  fi
}

# Remove unused docker images
remove_images_unused() {
  local verbosity="$1"

  if [ "$verbosity" -ne 0 ]; then
    printf "Removing unused docker images\n"
  fi

  if [ "$verbosity" -eq 2 ]; then
    docker image prune
  else
    docker image prune --force >/dev/null 2>&1
  fi
}

# Remove all data generated by Docker
remove_all() {
  local verbosity="$1"

  if [ "$verbosity" -ne 0 ]; then
    printf "Removing all data generated by Docker\n"
  fi

  # Stop all containers
  if [ "$verbosity" -eq 2 ]; then
    docker stop $(docker ps --all --quiet)
  else
    docker stop $(docker ps --all --quiet) >/dev/null 2>&1
  fi

  # Kill all containers
  if [ "$verbosity" -eq 2 ]; then
    docker kill $(docker ps --all --quiet)
  else
    docker kill $(docker ps --all --quiet) >/dev/null 2>&1
  fi

  # Remove all containers
  if [ "$verbosity" -eq 2 ]; then
    docker rm --force --volumes $(docker ps --all --quiet)
  else
    docker rm --force --volumes $(docker ps --all --quiet) >/dev/null 2>&1
  fi

  # Remove all unused volumes
  if [ "$verbosity" -eq 2 ]; then
    docker volume prune --force
  else
    docker volume prune --force >/dev/null 2>&1
  fi

  # Remove all volumes
  if [ "$verbosity" -eq 2 ]; then
    docker volume rm --force $(docker volume ls --quiet)
  else
    docker volume rm --force $(docker volume ls --quiet) >/dev/null 2>&1
  fi
  
  # Remove all unused images
  if [ "$verbosity" -eq 2 ]; then
    docker image prune --all --force
  else
    docker image prune --all --force >/dev/null 2>&1
  fi

  # Remove all images
  if [ "$verbosity" -eq 2 ]; then
    docker image rm --force $(docker image ls --all --quiet)
  else
    docker image rm --force $(docker image ls --all --quiet) >/dev/null 2>&1
  fi
}

# Check if it is an integer
exit_if_not_integer() {
  local variable="$1"

  if ! echo "$variable" | grep -Eq  "^[0-9]{1}$"; then
    printf "%s: not a integer\n" "$variable"
    usage
    exit 1
  fi
}

# Main
for arg in "$@"; do
  shift
  case "$arg" in
    "--interactive")
      set -- "$@" "-i"
      ;;
    "--detach")
      set -- "$@" "-d"
      ;;
    "--force")
      set -- "$@" "-f"
      ;;
    "--purge")
      set -- "$@" "-p"
      ;;
    "--verbosity")
      set -- "$@" "-v"
      ;;
    "--help")
      set -- "$@" "-h"
      ;;
    "--"*)
      set -- "$@" "-?"
      ;;
    *)
      set -- "$@" "$arg"
  esac
done

while getopts ":idfpv:h" option; do
  case $option in
    i)
      INTERACTIVE=true
      ;;
    d)
      DETACH=true
      ;;
    f)
      FORCE=true
      ;;
    p)
      PURGE=true
      ;;
    v)
      VERBOSITY=$OPTARG
      exit_if_not_integer "$VERBOSITY"
      ;;
    h)
      usage
      exit
      ;;
    :)
      printf "%s: argument required\n" "$OPTARG"
      exit 1
      ;;
    \?)
      printf "%s: invalid option\n" "$OPTARG"
      usage
      exit 1
      ;;
  esac
done

if [ "$INTERACTIVE" = true ] && [ "$DETACH" = true ] && [ "$PURGE" = true ]; then
  printf -- "--interactive --detach --purge: options must be used separately\n"
  usage
  exit 1
elif [ "$INTERACTIVE" = true ] && [ "$DETACH" = true ]; then
  printf -- "--interactive --detach: options must be used separately\n"
  usage
  exit 1
elif [ "$INTERACTIVE" = true ] || [ "$DETACH" = true ] && [ "$PURGE" = true ]; then
  printf -- "--purge: option must be used alone\n"
  usage
  exit 1
elif [ "$PURGE" = true ]; then
  remove_all "$VERBOSITY"
else
  if [ "$INTERACTIVE" = true ]; then
    VERBOSITY=2
  fi

  if [ "$VERBOSITY" -ne 0 ]; then
    banner
  fi

  # Pre-run
  if [ "$FORCE" = false ]; then
    if ! sh pre-run -v "$VERBOSITY"; then
      exit 0
    fi
  fi

  # Run
  if [ "$VERBOSITY" -ne 0 ]; then
    printf "\n"
    printf "Run\n"
  fi
  
  if ! build_container "$IMAGE_TAG" "$CONTAINER_NAME" "$VERBOSITY"; then
    exit 1
  fi
  
  if ! start_container "$IMAGE_TAG" "$CONTAINER_NAME" \
    "$SRC_VOLUME_1" "$DST_VOLUME_1" \
    "$SRC_VOLUME_2" "$DST_VOLUME_2" \
    "$SRC_VOLUME_3" "$DST_VOLUME_3" \
    "$SRC_VOLUME_4" "$DST_VOLUME_4" \
    "$INTERACTIVE" "$VERBOSITY"; then
    exit 1
  fi

  stop_container "$CONTAINER_NAME" "$VERBOSITY"
  kill_container "$CONTAINER_NAME" "$VERBOSITY"
  remove_container "$CONTAINER_NAME" "$VERBOSITY"
  remove_volumes_unused "$VERBOSITY"
  remove_images_unused "$VERBOSITY"

  # Post-run
  sh post-run -v "$VERBOSITY"
fi
