#!/bin/sh -u
# -u: Treat unset variables as an error when performing parameter expansion.
# If expansion is attempted on an unset interactive, exits with a non-zero status.
#
# Process executed before application manager execution
#
# author: Loan Lassalle <https://github.com/lassalleloan>

# Current version of StevenBlack/hosts source files
HOSTS_VERSION="$(sed -En 's/^# HOSTS_VERSION=([0-9]([.][0-9]*)*)$/\1/p' env.list)"

# Default verbosity level
VERBOSITY="$(sed -En 's/^# VERBOSITY=([0-9]([.][0-9]*)*)$/\1/p' env.list)"

# Display a banner
banner() {
  printf "\n"
  printf "Pre-run\n"
}

# Usage of the script
usage() {
  printf "Usage: pre-run [--verbosity (0 | 1 | 2)]\n"
  printf "\n"
  printf "Process executed before run-app execution\n"
  printf "\n"
  printf "Version: 1.0.0, build deadbeef\n"
  printf "\n"
  printf "Author:\n"
  printf "  Loan Lassalle - <https://github.com/lassalleloan>\n"
  printf "\n"
  printf "Options:\n"
  printf "  -v, --verbosity (0 | 1 | 2)     Level of verbosity: no ouput, step information, interactive\n"
  printf "  -h, --help                      Help on how to use this script\n"
}

# Check for updates
check_updates() {
  local hosts_version="$1"
  local verbosity="$2"

  if [ "$verbosity" -ne 0 ]; then
    printf "Checking for updates\n"
  fi

  new_version="$(curl https://raw.githubusercontent.com/StevenBlack/hosts/master/package.json --silent \
    |Â sed -En 's/^ *"version": *"([0-9]([.][0-9]*)*)",$/\1/p')"

  if [ "$verbosity" -eq 2 ]; then
    printf "Current version: %*s\n" 12 "$hosts_version"
    printf "New version: %*s\n" 12 "$new_version"
  fi

  # Edit HOSTS_VERSION variable in env.list file
  sed -i '' -E "/^# HOSTS_VERSION=([0-9]([.][0-9]*)*)$/s/$hosts_version/$new_version/" env.list

  if [ -f src/hosts ] && [ -s src/hosts ] && [ "$new_version" == "$current_version" ]; then
    exit 1
  fi
}

# Check if it is an integer
exit_if_not_integer() {
  local variable="$1"

  if ! echo "$variable" | grep -Eq  "^[0-9]{1}$"; then
    printf "%s: not a integer\n" "$variable"
    usage
    exit 1
  fi
}

# Main
for arg in "$@"; do
  shift
  case "$arg" in
    "--verbosity")
      set -- "$@" "-v"
      ;;
    "--help")
      set -- "$@" "-h"
      ;;
    "--"*)
      set -- "$@" "-?"
      ;;
    *)
      set -- "$@" "$arg"
  esac
done

while getopts ":v:h" option; do
  case $option in
    v)
      VERBOSITY=$OPTARG
      exit_if_not_integer "$VERBOSITY"
      ;;
    h)
      usage
      exit
      ;;
    :)
      printf "%s: argument required\n" "$OPTARG"
      exit 1
      ;;
    \?)
      printf "%s: invalid option\n" "$OPTARG"
      usage
      exit 1
      ;;
  esac
done

if [ "$VERBOSITY" -ne 0 ]; then
  banner
fi

# Check for updates
check_updates "$HOSTS_VERSION" "$VERBOSITY"
